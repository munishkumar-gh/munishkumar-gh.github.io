# -*- coding: utf-8 -*-
"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

## Munish Kumar (01/05/17)
"""

#########################################################################
"""
Soln: 76576500 in 6.1 seconds

It is too computationally intensive to calculate up to n or n+1 factors
However, a trick to use is to calculate up to square root of factors,
and increment counter by 2 each time (because if i is a factor, then
n/1 is a factor as well)

"""
#########################################################################

import time
import math
 
start = time.time()

def determine_divisor(n):
    count = 0
    sqn = math.sqrt(n)
    
    for i in range (1, int(sqn+1)):
        if n == 1:
            count +=1
        elif n > 1 and n%i == 0:
            count +=2
    return count

nm = 0
sum = 0
lod = 0
tri_num = 0

while lod <500:
    nm +=1
    tri_num +=nm
    lod = determine_divisor(tri_num)
    
elapsed = (time.time() - start)
print "%s found in %s seconds" % (tri_num, elapsed)
print "The number of divisors is: ", lod
